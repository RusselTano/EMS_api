import { RegistrationModel } from "../models/registration.model";
import { EventModel } from "../models/event.model";
import { UserModel } from "../models/user.model";

export class RegistrationService {
  /**
   * Inscrire un utilisateur √† un √©v√©nement
   */
  async registerUser(userId: string, eventId: string) {
    // V√©rifier si l'√©v√©nement existe
    const event = await EventModel.findById(eventId);
    if (!event) throw new Error("Event not found");

    // V√©rifier si l'utilisateur existe
    const user = await UserModel.findById(userId);
    if (!user) throw new Error("User not found");

    // V√©rifier si l'utilisateur est d√©j√† inscrit
    const existingRegistration = await RegistrationModel.findOne({
      user: userId,
      event: eventId,
    });

    if (existingRegistration)
      throw new Error("User already registered for this event");

    const registration = await RegistrationModel.create({
      user: userId,
      event: eventId,
      status: "pending", // üöÄ L'inscription est en attente
    });
    return registration;
  }

  /**
   * D√©sinscrire un utilisateur d'un √©v√©nement
   */
  async unregisterUser(userId: string, eventId: string) {
    // V√©rifier si l'inscription existe
    const registration = await RegistrationModel.findOne({
      user: userId,
      event: eventId,
    });
    if (!registration) throw new Error("User is not registered for this event");

    // Suppression de l'inscription
    await RegistrationModel.deleteOne({ user: userId, event: eventId });

    return registration;
  }

  async updateRegistrationStatus(
    registrationId: string,
    organizerId: string,
    status: string,
    userRole: string
  ) {
    // üîç V√©rifier si l'inscription existe
    const registration = await RegistrationModel.findById(registrationId);
    if (!registration) {
      throw new Error("Inscription non trouv√©e ‚ùå");
    }

    // üîç V√©rifier si l'√©v√©nement existe et r√©cup√©rer l'organisateur
    const event = await EventModel.findById(registration.event);
    if (!event) {
      throw new Error("√âv√©nement non trouv√© ‚ùå");
    }

    // üîí V√©rifier si l'utilisateur est bien l'organisateur de l'√©v√©nement
    const isOrganizer =
      event.organizer && event.organizer.toString() === organizerId;
    const isAdmin = userRole === "superadmin" || userRole === "admin";

    if (!isAdmin && !isOrganizer) {
      throw new Error(
        "Acc√®s refus√© ‚ùå : Vous ne pouvez pas supprimer cet √©v√©nement."
      );
    }

    // ‚úÖ Mettre √† jour le statut
    registration.status = status;
    await registration.save();

    return registration;
  }

  /**
   * üîπ R√©cup√©rer tous les utilisateurs inscrits √† un √©v√©nement
   */
  async getUsersForEvent(eventId: string) {
    // Chercher les inscriptions li√©es √† cet √©v√©nement
    const registrations = await RegistrationModel.find({
      event: eventId,
    }).populate("user", "name email");
    // console.log(registrations);

    // Extraire uniquement les utilisateurs
    const users = registrations.map((registration) => registration.user);

    return users;
  }

  async getRegistrationsByEvent(eventId: string) {
    const registrations = await RegistrationModel.find({ event: eventId })
     .populate("user", "name email")
    //  .select("user status");

    if (!registrations.length) {
      throw new Error("Aucune inscription trouv√©e ‚ùå");
    }

    return registrations;
  }
}
