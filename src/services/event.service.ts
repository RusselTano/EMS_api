import { EventModel } from "../models/event.model.js";
import { EventInterface } from "../interfaces/event.interface.js";
import { RegistrationModel } from "../models/registration.model.js";

export class EventService {
  async createEvent(userId: string, eventData: EventInterface) {
    const { title, date } = eventData;

    // üîç V√©rifier si l'√©v√©nement existe d√©j√†
    const existingEvent = await EventModel.findOne({ title: title });
    if (existingEvent) {
      throw new Error("Cet √©v√©nement existe d√©j√†");
    }

    // üîç V√©rifier que la date est valide
    if (date && new Date(date) < new Date()) {
      throw new Error("La date doit √™tre dans le futur");
    }

    // ‚úÖ Cr√©er l'√©v√©nement
    return await EventModel.create({
      ...eventData,
      organizer: userId, // üöÄ Ajout automatique de l'organisateur
    });
  }

  async getEvents() {
    return await EventModel.find();
  }

  // üöÄ 1Ô∏è‚É£ R√©cup√©rer les √©v√©nements cr√©√©s par un utilisateur (organisateur)
  async getEventsCreatedByUser(userId: string) {
    return await EventModel.find({ organizer: userId });
  }

  async getEvent(id: string) {
    return await EventModel.findById(id);
  }

  // üöÄ 2Ô∏è‚É£ R√©cup√©rer les √©v√©nements auxquels un utilisateur est inscrit
  async getEventsForUser(userId: string) {
    // R√©cup√©rer les inscriptions confirm√©es de l'utilisateur
    const registrations = await RegistrationModel.find({
      user: userId,
      status: "confirmed", // Filtrer uniquement les inscriptions valid√©es
    }).populate("event");
    // console.log(registrations);

    // Extraire uniquement les √©v√©nements
    return registrations.map((r) => r.event);
  }

  //üöÄ 3Ô∏è‚É£ R√©cup√©rer tous les √©v√©nements li√©s √† un utilisateur (cr√©√©s + inscrits)
  async getAllEventsForUser(userId: string) {
    const createdEvents = await this.getEventsCreatedByUser(userId);
    const registeredEvents = await this.getEventsForUser(userId);

    return {
      created: createdEvents,
      registered: registeredEvents,
    };
  }

  async getUserByEmail(email: string) {
    return await EventModel.findOne({ email });
  }

  async deleteEvent(eventId: string, userId: string, userRole: string) {
    // R√©cup√©rer l'√©v√©nement pour v√©rifier l'auteur
    const event = await EventModel.findById(eventId);
    if (!event) {
      throw new Error("√âv√©nement introuvable ‚ùå");
    }

    // V√©rifier si l'utilisateur est autoris√©
    const isOrganizer =
      event.organizer && event.organizer.toString() === userId;
    const isAdmin = userRole === "superadmin" || userRole === "admin";

    if (!isAdmin && !isOrganizer) {
      throw new Error(
        "Acc√®s refus√© ‚ùå : Vous ne pouvez pas supprimer cet √©v√©nement."
      );
    }

    // Supprimer l'√©v√©nement
    return await EventModel.findByIdAndDelete(eventId);
  }

  async updateEventPartial(id: string, eventData: EventInterface) {
    return await EventModel.findByIdAndUpdate(
      id,
      { $set: eventData },
      { new: true }
    );
  }

  async updateEventFull(id: string, eventData: EventInterface) {
    return EventModel.findByIdAndUpdate(id, eventData, {
      new: true,
      overwrite: true,
    });
  }

}
