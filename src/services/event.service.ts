import { EventModel } from "../models/event.model.js";
import { EventInterface } from "../interfaces/event.interface.js";
import { UserModel } from "../models/user.model.js";

export class EventService {
  async createEvent(eventData: EventInterface) {
    const { title, date, organizer } = eventData;

    // üîç V√©rifier si l'√©v√©nement existe d√©j√†
    const existingEvent = await EventModel.findOne({ title: title });
    if (existingEvent) {
      throw new Error("Cet √©v√©nement existe d√©j√†");
    }

    // üîç V√©rifier que la date est valide
    if (date && new Date(date) < new Date()) {
      throw new Error("La date doit √™tre dans le futur");
    }

    // üî• V√©rifier si l'utilisateur est d√©j√† `organizer`, sinon le promouvoir
    const user = await UserModel.findById(organizer);
    if (user && user.role.toLowerCase() === "participant") {
      user.role = "organizer";
      await user.save();
    }

    // ‚úÖ Cr√©er l'√©v√©nement
    return await EventModel.create(eventData);
  }

  async getEvents() {
    return await EventModel.find();
  }

  async getEvent(id: string) {
    return await EventModel.findById(id);
  }

  async getUserByEmail(email: string) {
    return await EventModel.findOne({ email });
  }

  async deleteEvent(eventId: string, userId: string, userRole: string) {
    // R√©cup√©rer l'√©v√©nement pour v√©rifier l'auteur
    const event = await EventModel.findById(eventId);
    if (!event) {
      throw new Error("√âv√©nement introuvable ‚ùå");
    }
  
    // V√©rifier si l'utilisateur est autoris√© √† supprimer l'√©v√©nement
    if (userRole === "organizer" && event.organizer.toString() !== userId) {
      throw new Error("Vous ne pouvez pas supprimer un √©v√©nement dont vous n'√™tes pas l'auteur ‚ùå");
    }
  
    // Supprimer l'√©v√©nement
    return await EventModel.findByIdAndDelete(eventId);
  }
  
}
